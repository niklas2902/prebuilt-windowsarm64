name: Build Windows ARM64 Python Standalone

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-python-arm64:
    runs-on: windows-11-arm
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python build environment
      run: |
        # Try to use pre-installed Visual Studio or install minimal required tools
        # Check if Visual Studio is already available
        $vsInstances = Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" | 
          Get-ItemProperty | Where-Object { $_.DisplayName -like "*Visual Studio*" -or $_.DisplayName -like "*Build Tools*" }
        
        if (-not $vsInstances) {
          # Install build tools without requiring reboot
          Write-Host "Installing Visual Studio Build Tools..."
          $url = "https://aka.ms/vs/17/release/vs_buildtools.exe"
          Invoke-WebRequest -Uri $url -OutFile "vs_buildtools.exe"
          
          # Install with minimal components, suppress reboot
          Start-Process -FilePath "vs_buildtools.exe" -ArgumentList "--quiet", "--wait", "--add", "Microsoft.VisualStudio.Workload.VCTools", "--add", "Microsoft.VisualStudio.Component.Windows11SDK.22621", "--norestart" -Wait
        } else {
          Write-Host "Visual Studio Build Tools already available"
        }
        
    - name: Download Python source
      run: |
        $pythonVersion = "3.11.8"
        $url = "https://www.python.org/ftp/python/$pythonVersion/Python-$pythonVersion.tgz"
        Invoke-WebRequest -Uri $url -OutFile "Python-$pythonVersion.tgz"
        
        # Extract using tar (available in Windows 10+)
        tar -xzf "Python-$pythonVersion.tgz"
        
        # Rename for easier reference
        Rename-Item "Python-$pythonVersion" "python-source"
      
    - name: Build Python for ARM64
      run: |
        cd python-source
        
        # Set up Visual Studio environment for native ARM64 build
        $vsPath = "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools"
        if (Test-Path "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools") {
          $vsPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools"
        }
        
        & "$vsPath\VC\Auxiliary\Build\vcvars64.bat"
        
        # Configure and build natively on ARM64
        cd PCbuild
        
        # Build Python natively for ARM64
        .\build.bat -c Release
        
    - name: Create standalone distribution
      run: |
        cd python-source
        
        # Create distribution directory
        New-Item -ItemType Directory -Force -Path "python-arm64-standalone"
        
        # Copy built Python files
        $buildDir = "PCbuild\amd64"
        Copy-Item "$buildDir\python.exe" "python-arm64-standalone\"
        Copy-Item "$buildDir\python311.dll" "python-arm64-standalone\"
        Copy-Item "$buildDir\python3.dll" "python-arm64-standalone\"
        
        # Copy standard library
        Copy-Item "Lib" "python-arm64-standalone\Lib" -Recurse
        
        # Copy DLLs directory if it exists
        if (Test-Path "$buildDir\DLLs") {
          Copy-Item "$buildDir\DLLs" "python-arm64-standalone\DLLs" -Recurse
        }
        
        # Copy extension modules
        New-Item -ItemType Directory -Force -Path "python-arm64-standalone\DLLs"
        Get-ChildItem "$buildDir" -Filter "*.pyd" | Copy-Item -Destination "python-arm64-standalone\DLLs\"
        
