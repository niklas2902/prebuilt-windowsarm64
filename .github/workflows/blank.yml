name: Build Windows ARM64 Python Standalone

on:
  workflow_dispatch:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-python-arm64:
    runs-on: windows-11-arm
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Ensure Visual Studio is available
      shell: pwsh
      run: |
        $vcvarsPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat"
        if (-not (Test-Path $vcvarsPath)) {
          Write-Host "Installing Build Tools..."
          $url = "https://aka.ms/vs/17/release/vs_buildtools.exe"
          Invoke-WebRequest -Uri $url -OutFile "vs_buildtools.exe"
          Start-Process -FilePath "vs_buildtools.exe" -ArgumentList "--quiet", "--wait", "--norestart", `
          "--add", "Microsoft.VisualStudio.Workload.VCTools",
          "--add", "Microsoft.VisualStudio.Component.VC.ATL.ARM64",
          "--add", "Microsoft.VisualStudio.Component.VC.Tools.ARM64",
          "--add", "Microsoft.VisualStudio.Component.Windows11SDK.22621"
        } else {
          Write-Host "Visual Studio Build Tools already present."
        }

    - name: Download Python source
      run: |
        $pythonVersion = "3.12.4"
        $url = "https://www.python.org/ftp/python/$pythonVersion/Python-$pythonVersion.tgz"
        Invoke-WebRequest -Uri $url -OutFile "Python-$pythonVersion.tgz"
        tar -xzf "Python-$pythonVersion.tgz"
        Rename-Item "Python-$pythonVersion" "python-source"

    - name: Build Python for ARM64
      shell: cmd
      working-directory: python-source
      run: |
        REM Locate Visual Studio using vswhere
        for /f "tokens=*" %%i in (
          '"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires Microsoft.VisualStudio.Component.VC.Tools.arm64 -property installationPath'
        ) do (
        set "VS_PATH=%%i"
        )

        if not defined VS_PATH (
          echo Visual Studio not found!
          exit /b 1
         )

         echo Using Visual Studio at %VS_PATH%
         call "%VS_PATH%\VC\Auxiliary\Build\vcvarsall.bat" arm64

         cd PCbuild
         set CL=/D_WIN32_WINNT=0x0A00
         build.bat -c Release -p ARM64

    - name: Create standalone distribution
      shell: pwsh
      working-directory: python-source
      run: |
        $dist = "python-arm64-standalone"
        $buildDir = "PCbuild\arm64"

        # Clean and recreate output directory
        Remove-Item -Recurse -Force $dist -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Force -Path $dist

        # Copy executables and runtime DLLs
        Copy-Item "$buildDir\python.exe" "$dist\"
        Copy-Item "$buildDir\pythonw.exe" "$dist\" -ErrorAction SilentlyContinue
        Copy-Item "$buildDir\python3.dll" "$dist\" -ErrorAction SilentlyContinue
        Copy-Item "$buildDir\python*.dll" "$dist\" -ErrorAction SilentlyContinue
        Copy-Item "$buildDir\vcruntime140*.dll" "$dist\" -ErrorAction SilentlyContinue

        # Copy directories: Lib, DLLs, Scripts, etc.
        foreach ($dir in "DLLs", "Lib", "Scripts", "tcl") {
          if (Test-Path $dir) {
            Copy-Item $dir "$dist\$dir" -Recurse
          }
        }

        # Copy Include directory with all headers
        New-Item -ItemType Directory -Force -Path "$dist\Include"
        Copy-Item "Include\*" "$dist\Include\" -Recurse

        # CRITICAL: Copy the generated pyconfig.h from PC directory
        Copy-Item "PC\pyconfig.h" "$dist\Include\pyconfig.h" -Force

        # Also copy the platform-specific pyconfig.h if it exists
        if (Test-Path "$buildDir\pyconfig.h") {
          Copy-Item "$buildDir\pyconfig.h" "$dist\Include\pyconfig.h" -Force
        }

        # Create and copy .lib files into libs/
        $libsDest = Join-Path $dist "libs"
        New-Item -ItemType Directory -Force -Path $libsDest
        Get-ChildItem "$buildDir" -Filter "*.lib" | Copy-Item -Destination $libsDest

        # Copy LICENSE
        if (Test-Path "LICENSE.txt") {
          Copy-Item "LICENSE.txt" "$dist\"
        }

        # Verify pyconfig.h was copied
        if (Test-Path "$dist\Include\pyconfig.h") {
          Write-Host "✓ pyconfig.h successfully copied"
        } else {
          Write-Host "✗ ERROR: pyconfig.h not found!"
          Write-Host "Available files in PC directory:"
          Get-ChildItem "PC" -Name
          Write-Host "Available files in build directory:"
          Get-ChildItem "$buildDir" -Name
          exit 1
        }

    - name: Prepare archive content
      shell: pwsh
      working-directory: python-source
      run: |
        New-Item -ItemType Directory -Force -Path python
        Copy-Item -Path "python-arm64-standalone\*" -Destination "python" -Recurse

    - name: Create archive
      shell: pwsh
      working-directory: python-source
      run: Compress-Archive -Path "python\*" -DestinationPath "cpython-3.12.4-windowsarm64.zip"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-arm64-standalone-windows
        path: python-source/cpython-3.12.4-windowsarm64.zip
        retention-days: 30
